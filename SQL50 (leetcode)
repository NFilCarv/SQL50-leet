--1757. Recyclable and Low Fat Products
SELECT product_id
FROM Products
WHERE low_fats = 'Y' AND recyclable = 'Y';
        --OPTIMAL
SELECT product_id FROM Products
WHERE low_fats = 'Y' AND recyclable = 'Y' ;

--584. Find Customer Referee
SELECT name
FROM Customer
WHERE referee_id IS NULL OR referee_id != 2;
        --OPTIMAL
select name from customer where referee_id !=2 or referee_id is null;

--595. Big Countries
SELECT name, population, area
FROM World
WHERE area >= 3000000 OR population >= 25000000
        --OPTIMAL
select name,population,area 
from world
where area>=3000000 or population >=25000000;

--1148. Article Views 
SELECT DISTINCT author_id AS id
FROM Views
WHERE author_id = viewer_id
ORDER BY id;
        --OPTIMAL
select distinct author_id as id from views where author_id=viewer_id order by id asc;

--1683. Invalid Tweets
SELECT tweet_id 
FROM Tweets
WHERE LENGTH(content) > 15;
        --OPTIMAL
select tweet_id from Tweets where length(content) >15 

--1378. Replace Employee ID With The Unique Identifier
SELECT e.name, eu.unique_id 
FROM Employees e
LEFT JOIN EmployeeUNI eu
ON e.id = eu.id; 
        --OPTIMAL
select eu.unique_id, e.name from Employees e left join EmployeeUNI eu on 
e.id = eu.id

--1068. Product Sales Analysis I
SELECT p.product_name, s.year, s.price
FROM Sales s
JOIN Product p
ON s.product_id = p.product_id;
        --OPTIMAL
select b.product_name, a.year, a.price
from sales as a
left join product as b
on a.product_id = b.product_id

--1581. Customer Who Visited but Did Not Make Any Transactions
SELECT v.customer_id, COUNT(*) AS count_no_trans
FROM Visits v
LEFT JOIN Transactions t
ON v.visit_id = t.visit_id
WHERE t.visit_id IS NULL
GROUP BY v.customer_id;
        --OPTIMAL
select customer_id, count(visit_id) as count_no_trans
from Visits 
where visit_id not in (select visit_id from Transactions)
group by customer_id;

--197. Rising Temperature
SELECT w1.id 
FROM Weather w1
JOIN Weather w2 
ON DATE_SUB(w1.recordDate, INTERVAL 1 DAY) = w2.recordDate
WHERE w1.temperature > w2.temperature;
        --OPTIMAL
SELECT 
    w1.id
FROM 
    Weather w1
JOIN 
    Weather w2
ON 
    w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)
WHERE 
    w1.temperature > w2.temperature;

--1661. Average Time of Process per Machine
SELECT 
    machine_id, 
    ROUND(AVG(end_time - start_time), 3) AS processing_time
FROM (
    SELECT 
        machine_id, 
        process_id,
        MAX(CASE WHEN activity_type = 'end' THEN timestamp END) AS end_time,
        MAX(CASE WHEN activity_type = 'start' THEN timestamp END) AS start_time
    FROM Activity
    GROUP BY machine_id, process_id
) AS ProcessTimes
GROUP BY machine_id;

        --OPTIMAL
SELECT a1.machine_id, ROUND(AVG(a2.timestamp-a1.timestamp),3) AS processing_time
FROM Activity a1 JOIN Activity a2 
ON a1.machine_id = a2.machine_id
AND a1.process_id = a2.process_id
AND a1.activity_type='start'
AND a2.activity_type='end'
AND a1.timestamp<a2.timestamp
GROUP BY a1.machine_id;

--577. Employee Bonus