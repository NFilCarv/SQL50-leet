--1757. Recyclable and Low Fat Products
SELECT product_id
FROM Products
WHERE low_fats = 'Y' AND recyclable = 'Y';

--584. Find Customer Referee
SELECT name
FROM Customer
WHERE referee_id IS NULL OR referee_id != 2;

--595. Big Countries
SELECT name, population, area
FROM World
WHERE area >= 3000000 OR population >= 25000000

--1148. Article Views 
SELECT DISTINCT author_id AS id
FROM Views
WHERE author_id = viewer_id
ORDER BY id;

--1683. Invalid Tweets
SELECT tweet_id 
FROM Tweets
WHERE LENGTH(content) > 15;

--1378. Replace Employee ID With The Unique Identifier
SELECT e.name, eu.unique_id 
FROM Employees e
LEFT JOIN EmployeeUNI eu
ON e.id = eu.id; 

--1068. Product Sales Analysis I
SELECT p.product_name, s.year, s.price
FROM Sales s
JOIN Product p
ON s.product_id = p.product_id;

--1581. Customer Who Visited but Did Not Make Any Transactions
SELECT v.customer_id, COUNT(*) AS count_no_trans
FROM Visits v
LEFT JOIN Transactions t
ON v.visit_id = t.visit_id
WHERE t.visit_id IS NULL
GROUP BY v.customer_id;


--197. Rising Temperature
SELECT 
    w1.id
FROM 
    Weather w1
JOIN 
    Weather w2
ON 
    w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)
WHERE 
    w1.temperature > w2.temperature;

--1661. Average Time of Process per Machine
SELECT 
    machine_id, 
    ROUND(AVG(end_time - start_time), 3) AS processing_time
FROM (
    SELECT 
        machine_id, 
        process_id,
        MAX(CASE WHEN activity_type = 'end' THEN timestamp END) AS end_time,
        MAX(CASE WHEN activity_type = 'start' THEN timestamp END) AS start_time
    FROM Activity
    GROUP BY machine_id, process_id
) AS ProcessTimes
GROUP BY machine_id;

--577. Employee Bonus
SELECT e.name, b.bonus
FROM Employee e
LEFT JOIN Bonus b ON e.empId = b.empId
WHERE b.bonus < 1000 OR b.bonus IS NULL;


--1280. Students and Examinations

SELECT s.student_id, 
       s.student_name, 
       sub.subject_name, 
       COALESCE(COUNT(e.subject_name), 0) AS attended_exams
FROM Students s
CROSS JOIN Subjects sub
LEFT JOIN Examinations e
    ON s.student_id = e.student_id AND sub.subject_name = e.subject_name
GROUP BY s.student_id, s.student_name, sub.subject_name
ORDER BY s.student_id, sub.subject_name;

--570. Managers with at Least 5 Direct Reports

SELECT e.name
FROM Employee e
JOIN (
    SELECT managerId
    FROM Employee
    WHERE managerId IS NOT NULL
    GROUP BY managerId
    HAVING COUNT(*) >= 5
) m ON e.id = m.managerId;

 -- 1934. Confirmation Rate

SELECT s.user_id, 
       IFNULL(ROUND(SUM(CASE WHEN c.action = 'confirmed' THEN 1 ELSE 0 END) / COUNT(c.user_id), 2), 0) AS confirmation_rate
FROM Signups s
LEFT JOIN Confirmations c ON s.user_id = c.user_id
GROUP BY s.user_id;

--620. Not Boring Movies

SELECT id, movie, description, rating
FROM Cinema
WHERE id % 2 = 1 AND description <> 'boring'
ORDER BY rating DESC;

--1251. Average Selling Price
WITH Sales AS (
    SELECT u.product_id, u.units, p.price
    FROM UnitsSold u
    JOIN Prices p 
    ON u.product_id = p.product_id 
    AND u.purchase_date BETWEEN p.start_date AND p.end_date
)
SELECT 
    p.product_id, 
    COALESCE(ROUND(SUM(s.units * s.price) / NULLIF(SUM(s.units), 0), 2), 0) AS average_price
FROM Prices p
LEFT JOIN Sales s ON p.product_id = s.product_id
GROUP BY p.product_id;

-- 1075. Project Employees 

SELECT 
    p.project_id, 
    ROUND(AVG(e.experience_years), 2) AS average_years
FROM Project p
JOIN Employee e ON p.employee_id = e.employee_id
GROUP BY p.project_id;

--1633. Percentage of Users Attended a Contest
SELECT 
    r.contest_id, 
    ROUND((COUNT(r.user_id) * 100.0) / (SELECT COUNT(*) FROM Users), 2) AS percentage
FROM Register r
GROUP BY r.contest_id
ORDER BY percentage DESC, contest_id ASC;

--1211. Queries Quality and Percentage
SELECT
    query_name,
    ROUND(AVG(rating * 1.0 / position), 2) AS quality,
    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage
FROM Queries
GROUP BY query_name;

--1193. Monthly Transactions 
SELECT 
    DATE_FORMAT(trans_date, '%Y-%m') AS month, 
    country, 
    COUNT(*) AS trans_count, 
    SUM(amount) AS trans_total_amount, 
    SUM(state = 'approved') AS approved_count, 
    SUM(CASE WHEN state = 'approved' THEN amount ELSE 0 END) AS approved_total_amount
FROM Transactions
GROUP BY month, country;

--1174. Immediate Food Delivery 
SELECT 
    ROUND(
        100 * SUM(order_date = customer_pref_delivery_date) / COUNT(*), 
        2
    ) AS immediate_percentage
FROM (
    SELECT customer_id, order_date, customer_pref_delivery_date
    FROM Delivery
    WHERE (customer_id, order_date) IN (
        SELECT customer_id, MIN(order_date)
        FROM Delivery
        GROUP BY customer_id
    )
) first_orders;
-- 
--550. Game Play Analysis IV
SELECT
  ROUND(COUNT(DISTINCT player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction
FROM
  Activity
WHERE
  (player_id, DATE_SUB(event_date, INTERVAL 1 DAY))
  IN (
    SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id
  )

  --2356. Number of Unique Subjects Taught by Each Teacher
SELECT teacher_id, COUNT(DISTINCT subject_id) AS cnt
FROM Teacher
GROUP BY teacher_id;


--1141. User Activity for the Past 30 Days I
SELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users
FROM Activity
WHERE activity_date BETWEEN DATE('2019-07-27') - INTERVAL 29 DAY AND DATE('2019-07-27')
GROUP BY activity_date;

--1070. Product Sales Analysis III
SELECT s.product_id, s.year AS first_year, s.quantity, s.price
FROM Sales s
WHERE s.year = (SELECT MIN(year) FROM Sales WHERE product_id = s.product_id);

--596. Classes More Than 5 Students
SELECT class
FROM Courses
GROUP BY class
HAVING COUNT(student) >= 5;

--1729. Find Followers Count
SELECT user_id, count(follower_id) as followers_count
FROM Followers
GROUP by user_id
ORDER BY user_id ASC

--619. Biggest Single Number
SELECT MAX(num) AS num
FROM MyNumbers
WHERE num IN (
    SELECT num
    FROM MyNumbers
    GROUP BY num
    HAVING COUNT(num) = 1
);

--1045. Customers Who Bought All Products
SELECT customer_id
FROM Customer
GROUP BY customer_id
HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product);

--1731. The Number of Employees Which Report to Each Employee
SELECT employee_id, department_id
FROM Employee
WHERE primary_flag = 'Y'
   OR employee_id NOT IN (SELECT employee_id FROM Employee WHERE primary_flag = 'Y');


--610. Triangle Judgement
SELECT *, IF(x+y>z and y+z>x and z+x>y, "Yes", "No") as triangle
FROM Triangle

--180. Consecutive Numbers
SELECT DISTINCT l1.num AS ConsecutiveNums
FROM Logs l1
JOIN Logs l2 ON l1.id = l2.id - 1
JOIN Logs l3 ON l1.id = l3.id - 2
WHERE l1.num = l2.num AND l2.num = l3.num;

--1164. Product Price at a Given Date
SELECT DISTINCT 
    product_id, 
    10 AS price 
FROM Products 
WHERE product_id NOT IN (
    SELECT DISTINCT product_id 
    FROM Products 
    WHERE change_date <= '2019-08-16'
)

UNION 
SELECT 
    p.product_id, 
    p.new_price AS price 
FROM Products p
WHERE (p.product_id, p.change_date) IN (
    SELECT product_id, MAX(change_date) 
    FROM Products 
    WHERE change_date <= '2019-08-16' 
    GROUP BY product_id
);

--1204. Last Person to Fit in the Bus
WITH CumulativeWeight AS (
    SELECT 
        person_name, 
        weight,
        turn,
        SUM(weight) OVER (ORDER BY turn) AS total_weight
    FROM Queue
)
SELECT person_name
FROM CumulativeWeight
WHERE total_weight <= 1000
ORDER BY total_weight DESC
LIMIT 1;

--1907. Count Salary Categories
SELECT 'Low Salary' AS category, COUNT(*) AS accounts_count
FROM Accounts
WHERE income < 20000

UNION ALL

SELECT 'Average Salary' AS category, COUNT(*) AS accounts_count
FROM Accounts
WHERE income BETWEEN 20000 AND 50000

UNION ALL

SELECT 'High Salary' AS category, COUNT(*) AS accounts_count
FROM Accounts
WHERE income > 50000;

--1667. Fix Names in a Table
SELECT user_id, 
    CONCAT(UPPER(SUBSTRING(name,1,1)), LOWER(SUBSTRING(name,2))) as name
FROM Users
ORDER BY user_id;

--1527. Patients With a Condition
SELECT patient_id, patient_name, conditions
FROM Patients
WHERE conditions LIKE 'DIAB1%' 
   OR conditions LIKE '% DIAB1%';


--196. Delete Duplicate Emails

DELETE p FROM Person p
JOIN Person p2 
ON p.Email = p2.Email AND p.Id > p2.Id;

--176. Second Highest Salary
SELECT 
    (SELECT DISTINCT salary 
     FROM EMPLOYEE 
     ORDER BY salary DESC 
     LIMIT 1 OFFSET 1) 
    AS SecondHighestSalary;

--1484. Group Sold Products By The Date
SELECT 
    sell_date, 
    COUNT(DISTINCT product) AS num_sold, 
    GROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR ',') AS products
FROM Activities
GROUP BY sell_date
ORDER BY sell_date;

--1327. List the Products Ordered in a Period
SELECT p.product_name, SUM(o.unit) AS unit
FROM Orders o
JOIN Products p ON o.product_id = p.product_id
WHERE DATE_FORMAT(o.order_date, '%Y-%m') = '2020-02'
GROUP BY p.product_id, p.product_name
HAVING SUM(o.unit) >= 100;


--1517. Find Users With Valid E-Mails

SELECT *
FROM Users
WHERE mail REGEXP '^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode[.]com$';

--1978. Employees Whose Manager Left the Company
SELECT
    employee_id
FROM 
    employees
WHERE
    salary < 30000
    AND manager_id NOT IN (SELECT employee_id FROM employees)
ORDER BY 
    employee_id;